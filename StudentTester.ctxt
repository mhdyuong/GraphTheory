#BlueJ class context
comment0.params=
comment0.target=void\ testEdgeEquals01()
comment1.params=
comment1.target=void\ testIsCycle03()
comment10.params=
comment10.target=void\ testGetVertexDegree01()
comment11.params=
comment11.target=void\ testUnion01()
comment12.params=
comment12.target=void\ testIntersection01()
comment13.params=
comment13.target=void\ testIsBipartite01()
comment14.params=
comment14.target=void\ testHasPath01()
comment14.text=\r\n\ \ \ \ is\ there\ a\ path\ from\ v\ to\ w\ of\ any\ length\ <\=\ myVertices.size()\r\n\ \ \ \ \r\n\ \ \ \ page\ 388\:\ \ Example\ 8.2.2/\ Figure\ 8.2.1\ -\ assume\ all\ edges\ are\ bidirectional\r\n
comment15.params=
comment15.target=void\ testIsConnectedGraph01()
comment15.text=\r\n\ \ \ \ page\ 388\ -\ 389\r\n\ \ \ \ \ \ \ A\ graph\ is\ connected\ if\ given\ any\ vertices\ v\ and\ w\ in\ G,\ there\ is\ a\ path\ from\ v\ to\ w\r\n\ \ \ \ \r\n\ \ \ \ Example\ 8.2.5\ /\ Figure\ 8.2.1\ -\ In\ this\ example\ assume\ all\ edges\ are\ bidirectional\r\n
comment16.params=
comment16.target=void\ testIsSimplePath01()
comment16.text=\ \ \ \ isSimplePath(List<String>\ p)\r\n\ \ \ \ page\ 391\r\n\ \ \ \ \ \ \ A\ simple\ path\ from\ v\ to\ w\ is\ a\ path\ from\ v\ to\ w\ with\ no\ repeated\ vertices\r\n\ \ \ \ \ \ \ \r\n\ \ \ \ Example\ 8.2.15\ /\ Figure\ 8.2.1\ -\ assume\ all\ edges\ are\ bidirectional\r\n
comment17.params=
comment17.target=void\ testIsCycle01()
comment17.text=\ \ \ \ isCycle(List<String>\ c)\r\n\ \ \ \ page\ 391\r\n\ \ \ \ \ \ \ A\ cycle\ is\ a\ path\ of\ nonzero\ length\ from\ v\ to\ v\ with\ no\ repeated\ edges\r\n\ \r\n\ \ \ \ Example\ 8.2.15\ /\ Figure\ 8.2.1\ -\ assume\ all\ edges\ are\ bidirectional\r\n
comment18.params=
comment18.target=void\ testIsSimpleCycle01()
comment18.text=\ \ \ \ isSimpleCycle(List<String>\ sc)\r\n\ \ \ \ page\ 391\r\n\ \ \ \ \ \ \ A\ simple\ cycle\ is\ a\ cycle\ from\ v\ to\ v\ in\ which,\ except\ for\ the\ beginning\ and\ ending\ vertices\ that\ are\ both\ equal\ to\ v,\r\n\ \ \ \ \ \ \ \ \ \ there\ are\ no\ repeated\ edges\r\n\ \ \ \ \r\n\ \ \ \ Example\ 8.2.15\ /\ Figure\ 8.2.1\ -\ assume\ all\ edges\ are\ bidirectional\r\n
comment19.params=
comment19.target=void\ testSimpleGetCycle01()
comment19.text=\ \ \ \ getSimpleCycle(String\ v)\r\n\ \ \ \ page\ 391\r\n\ \ \ \ \ \ \ A\ cycle\ is\ a\ path\ of\ nonzero\ length\ from\ v\ to\ v\ with\ no\ repeated\ edges\r\n\ \ \ \ \ \ \ \r\n\ \ \ \ page\ 391\ \:\ \ Example\ 8.2.15\ /\ Figure\ 8.2.1\r\n
comment2.params=
comment2.target=void\ testIsSimpleCycle03()
comment3.params=
comment3.target=void\ testHasPath03()
comment4.params=
comment4.target=void\ testDriectedGraphEquals01()
comment5.params=
comment5.target=void\ testIsAdjacent01()
comment5.text=\r\n\ \ \ \ \ Example\ from\:\ http\://webwhompers.com/graph-theory.html\r\n\ \ \ \ \ \ \ \ \ \ \ Section\ Neighborhood\ and\ Degree\ \r\n
comment6.params=
comment6.target=void\ testGetNeighbors01()
comment6.text=\r\n\ \ \ \ \ Example\ from\:\ http\://webwhompers.com/graph-theory.html\r\n\ \ \ \ \ \ \ \ \ \ \ Section\ Neighborhood\ and\ Degree\ \r\n
comment7.params=
comment7.target=void\ testHasLoop01()
comment8.params=
comment8.target=void\ testParallelEdges01()
comment9.params=
comment9.target=void\ testGetAllIsolatedEdges01()
numComments=20
